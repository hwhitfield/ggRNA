######################################################################################################
##
##  FIGURES FOR CHAPTER 2 - LEGO CHAPTER
##


##### ---------- SET DIRECTORIES  -------------------------

LOCAL = FALSE
if (LOCAL){
  HERE_DIR <- "W:\\PhD_Aggressiveness\\scripts\\"
  DATA_DIR <- "W:\\PhD_Project_1\\Data\\"
} else {
  HERE_DIR <- "/stornext/Home/data/allstaff/w/whitfield.h/PhD_thesis/scripts/"
  DATA_DIR <- "/stornext/Home/data/allstaff/w/whitfield.h/PhD_Aggressiveness/data/"

  DE_OUTPUT_DIR <- "/stornext/Home/data/allstaff/w/whitfield.h/PhD_Aggressiveness/output/DE/"
  OUTPUT_DIR <-"/stornext/Home/data/allstaff/w/whitfield.h/PhD_thesis/figures/CH2_figs/"
  
  source("/stornext/Home/data/allstaff/w/whitfield.h/processing_scripts/Rfunc/InstallPackages.R", chdir=TRUE)
  source("/stornext/Home/data/allstaff/w/whitfield.h/processing_scripts/Rfunc/PlotFunc_R.R", chdir=TRUE)
  source("/stornext/Home/data/allstaff/w/whitfield.h/processing_scripts/Rfunc/PipelineFunctions.R", chdir=TRUE)
  source("/stornext/Home/data/allstaff/w/whitfield.h/processing_scripts/Rfunc/Colours.R")
  
  source("/stornext/Home/data/allstaff/w/whitfield.h/PhD_thesis/scripts/LeGO_Functions.R")
  source("/stornext/Home/data/allstaff/w/whitfield.h/archived_stuff/PhD_Project_1/LEGO_RC_SC_Functions.R")
  

}


setwd(HERE_DIR)
#source("./LeGO_Functions.R")
library(ggsci)
library(circlize)
library(ComplexHeatmap)

##### ---------- COLOURS & PALETTES  -------------------------

clone.pal <- c("#BC8E7D", "#485DAA")
names(clone.pal) <- c("c2", "c13")

clone_grey.pal <- watlington(2)
names(clone_grey.pal) <- c("c13", "c2")

clone.shapes <- c(17, 19)
names(clone.shapes) <- c("c2", "c13")

organ.pal <-  get_pal("Hoiho")[c(3, 2, 4)]
names(organ.pal) <- c("Lung", "Liver", "Tumour")

organ.shape <- c(16, 17, 4)
names(organ.shape) <- c("Liver", "Lung", "Tumour")

mouse.pal <- c( "#7d9fc2", "#C582B2", "#51806a")
names(mouse.pal) <- c("M1", "M2", "M3")

mouseRT.pal <- c( "#7d9fc2", "#C582B2", "#51806a")
names(mouseRT.pal) <- c("M4", "M5", "M6")

mouseRT.shapes <- c(15, 16, 17)
names(mouseRT.shapes) <- c("M4", "M5", "M6")

horizTheme <- theme(axis.ticks.y=element_blank(), plot.margin = unit(c(0.8, 0.4, 0, 0), "cm"),
                    axis.text.y=element_blank(),axis.title.y=element_blank(),
                    legend.direction = "horizontal", legend.box = "vertical",
                    legend.position="bottom")


## TCGA
cancertype_pals <- get_pal("Hoiho")[c(3, 2, 4)]
names(cancertype_pals) <- c("LUNG", "LIVER", "BREAST")
cancertype_pals["NA"] <- get_pal("Hoiho")[5]

tcga_pal <- cancertype_pals
tcga_pal["OTHER CARCINOMA"] <- get_pal("Hoiho")[5]

Colours_brca_subtype <- pal_npg()(5)[c(1,2,4,5)]
names(Colours_brca_subtype) <- c("Luminal B", "HER2-enriched", "Basal-like", "Luminal A")

## CCLE
Colours_brca_subtype_ccle <- pal_npg()(5)
names(Colours_brca_subtype_ccle) <- c("Luminal B", "Her2amp", "", "Basal-like", "Luminal A")
mets.pal <- watlington(2)
names(mets.pal) <- c("PRIMARY", "MET")

CCLEorgan.pal <-  get_pal("Hoiho")[c(3, 2, 4)]
names(CCLEorgan.pal) <- c("LUNG", "LIVER", "BREAST")

CCLEtissue.pal <-  get_pal("Hoiho")[c(3, 2, 4, 1)]
names(CCLEtissue.pal) <- c("LUNG_TISSUE", "LIVER_TISSUE", "BREAST_TISSUE", "PLEURA_TISSUE")


##### ---------- LOAD & PROCESS LEGO DATA -------------------------

Replicates <- c('Ms245_Liver_02000_87K_S4', 'Ms245_Liver_10340_150K_S3', 'Ms245_Liver_10340_150K_S3', 'Ms245_Liver_10340_150K_S3', 
                'Ms245_Lung_02000_48K_S2', 'Ms245_Lung_10340_85K_S1', 'Ms245_Lung_10340_85K_S1', 'Ms245_Lung_10340_85K_S1', 
                "Ms245_Tumour_10340_180k_S3", "Ms245_Tumour_02000_100K_S8", "Ms245_Tumour_10340_180k_S3", "Ms245_Tumour_10340_180k_S3",
                
                'Ms247_Liver_02000_8k_S13', 'Ms247_Liver_10340_220k_S12', 'Ms247_Lungs_02000_24k_S11', 'Ms247_Lungs_10340_120k_S10', 
                "Ms247_Tumour_02000_55k_S9", "Ms247_Tumour_10340_62k_S8",
                
                'Ms319_Liver_02000_10K_S12', 'Ms_319_Liver_10340_30K_S11', 'Ms319_Lungs_02000_11K_S10', '1Ms319_Lungs_10340_14K_S9',
                "Ms319_Tum_02000_27K_S13", "MS_319_Tum_10340_37K_S14")

### --- Four versions of data: Organ, Clone, LL and RT
LEGO_DGE_lst <- c()

## -- CLONE & ORGAN
LEGO_DGE_lst$CLONE <- LoadLEGO(DIR=DATA_DIR, RT=FALSE, groups="clone")
LEGO_DGE_lst$ORGAN <- LoadLEGO(DIR=DATA_DIR, RT=FALSE, groups="organ")

## Get ensembl
ensembl_obj <- useEnsembl(biomart='ENSEMBL_MART_ENSEMBL', dataset="hsapiens_gene_ensembl", host="https://oct2018.archive.ensembl.org")

## Sum technical replicates, get annotations & filter gene names
LEGO_DGE_lst <- lapply(LEGO_DGE_lst, function(DGE_x){sumTechReps(DGE_x, Replicates)})
LEGO_DGE_lst <- lapply(LEGO_DGE_lst, function(DGE_x){GetGeneAnnotations(DGE_x, DGE_x$gene_lengths, ensembl_obj)})
LEGO_DGE_lst <- lapply(LEGO_DGE_lst, function(DGE_x){DGE_x[!(grepl("MT-|RPS|RPL|RRP",DGE_x$genes$hgnc_symbol)),]})

## Process counts
LEGO_DGE_lst$CLONE  <- ProcessLEGO(LEGO_DGE_lst$CLONE, main_factor="clone")
LEGO_DGE_lst$LL  <- ProcessLEGO(LEGO_DGE_lst$ORGAN[,grepl("Liver|Lung", colnames(LEGO_DGE_lst$ORGAN))], main_factor="organ")
LEGO_DGE_lst$ORGAN  <- ProcessLEGO(LEGO_DGE_lst$ORGAN, main_factor="organ")

## -- RT
Process_RT <- function(DATA_DIR, ensembl_x){
  DGE_x <- LoadLEGO(DIR=DATA_DIR, RT=TRUE, groups="organ")
  DGE_x <- GetGeneAnnotations(DGE_x, DGE_x$gene_lengths, ensembl_x)
  DGE_x <- ProcessLEGO(DGE_x, main_factor="RT")
  colnames(DGE_x$counts) <- DGE_x$samples$sample
  return(DGE_x)
}
LEGO_DGE_lst$RT <- Process_RT(DATA_DIR, ensembl_obj)


##### ---------- PERFORM DE -------------------------

contrast_lst <- list(c(-1,1,0,0,0,0),
                  c(1,-1,0,0,0,0),
                  c(-1,1,0,0,0),
                  c(-1,1,0,0))
names(contrast_lst) <- c("ORGAN","CLONE", "LL", "RT")

glm_obj_lst <- lapply(names(LEGO_DGE_lst), function(x_str){
  print(x_str)
  PerformDE_QLF(LEGO_DGE_lst[[x_str]], 
                         LEGO_DGE_lst[[x_str]]$design, 
                         contrast=contrast_lst[[x_str]])
})
names(glm_obj_lst) <- names(LEGO_DGE_lst)

toptags_lst <- lapply(names(LEGO_DGE_lst), function(x_str){
            print(x_str)
                FilterDE(glm_obj_lst[[x_str]])
})
names(toptags_lst) <- names(LEGO_DGE_lst)


##### ----- LOAD SCORES -----
ALL_singscores <- read.table(file=paste0(DATA_DIR,"ALL_singscores.txt"), sep='\t', header = TRUE)
ALL_singscores_stable <- read.table(file=paste0(DATA_DIR,"ALL_singscores_stable.txt"), sep='\t', header = TRUE)

## Sigs
load(file=paste0(DATA_DIR,"LEGO_sigs.Rdata"))
LEGO_sigs_lfc <- LEGO_sigs
LEGO_sigs <- LoadLEGOSigs()

lego_organ_genesigs=list()
for(x_name in names(LEGO_sigs)){
  lego_organ_genesigs=c(lego_organ_genesigs, list(GeneSet(setName=x_name,geneIds=unique(LEGO_sigs[[x_name]]))))
}




##### ----- LOAD & PROCESS BROCADE  -----
ProcessBROCADE(DATA_DIR)
load(file=paste0(DATA_DIR, "BROCADE_DGE.Rdata")) # BROCADE_DGE

qfit <- glmQLFit(BROCADE_DGE, BROCADE_DGE$design)
OrgansDE_BROCADE <- glmQLFTest(qfit, contrast=c(-1, 1, 0, 0, 0, 0)) 
tt_BROCADE <- topTags(OrgansDE_BROCADE, n=Inf, p.value=0.05, adjust.method = "BH", sort.by = "PValue")
tt_BROCADE <- tt_BROCADE[tt_BROCADE$table$FDR < 0.05 ,]$table

rpkm_dat <- BROCADE_DGE$logRPKM[!(BROCADE_DGE$genes$hgnc_symbol==""),]
rownames(rpkm_dat) <- BROCADE_DGE$genes[!(BROCADE_DGE$genes$hgnc_symbol==""),]$hgnc_symbol
rankData <- rankGenes(rpkm_dat)
score_df <- multiScore(rankData,  upSetColc =lego_organ_genesigs)




##### -- 2.2 EXPERIMENTAL DESIGN AND DATA PROCESSING  --------------------------
prefix="CH2.2/CH2.2_"


#### ---- FIGURE 1: MDS/technical replicates
## MA plots to compare replicates?

LEGO_DGE <- Get_nosumTechRep(DATA_DIR, ensembl_obj)

rep.shapes <- c(19,15,17,20)
names(rep.shapes) <- c("Rep1","Rep2", "Rep3", "noRep")

rep.pal <- c("#7198C7", "#36753B", "#9E4A66", "grey")
names(rep.pal) <- c("Rep1","Rep2", "Rep3", "noRep")

PLOT_CH2.2_MDS <- function(DGE_x, col_str, col_pal, shape_str, shape_pal, leg2_par=-0.15, ggplot_MDS=FALSE){
  shape_title <- str_to_title(shape_str)
  col_title <- str_to_title(col_str)
  
  if (!(ggplot_MDS)){
    opar <- par(no.readonly = TRUE)
    par(xpd = TRUE, mar = par()$mar + c(0, 0, 0, 5))
    limma::plotMDS(cpm(DGE_x, log=TRUE, prior.count = 2), 
                   col=as.vector(col_pal[as.vector(DGE_x$samples[[col_str]])]), 
                   pch=as.vector(shape_pal[as.vector(DGE_x$samples[[shape_str]])]),
                   cex = 1.6, cex.lab=0.8, cex.axis=0.6, tck=-0.02,mgp = c(1.5, 0.3, 0)) 
    legend(par("usr")[2], par("usr")[4], title=col_title, legend = levels(DGE_x$samples[[col_str]]), pch = 20,  col=as.vector(col_pal[levels(DGE_x$samples[[col_str]])]), cex = 0.6, pt.cex=0.8)
    legend(par("usr")[2], leg2_par, title=shape_title, legend = unique(DGE_x$samples[[shape_str]]), pch=as.vector(shape_pal[unique(DGE_x$samples[[shape_str]])]), cex = 0.6, pt.cex=0.8)
    par(opar)
  } else {
    MDS_dat <- limma::plotMDS(cpm(DGE_x, log=TRUE, prior.count = 2), 
                   col=as.vector(col_pal[as.vector(DGE_x$samples[[col_str]])]), 
                   pch=as.vector(shape_pal[as.vector(DGE_x$samples[[shape_str]])]),
                   cex = 1.6, cex.lab=0.8, cex.axis=0.6, tck=-0.02,mgp = c(1.5, 0.3, 0), plot=FALSE) 
    plot_dat <- data.frame(ColBy=as.vector(DGE_x$samples[[col_str]]),
                           ShapeBy=as.vector(DGE_x$samples[[shape_str]]),
                           Dim1=MDS_dat$x,
                           Dim2=MDS_dat$y)
    gg <- ggplot(data=plot_dat, aes(x=Dim1, y=Dim2, color=ColBy, shape=ShapeBy))+geom_point(size=4)+
      scale_color_manual(name=col_title, values=col_pal)+scale_shape_manual(name=shape_title,values=shape_pal)+theme_bw()+
      theme(panel.grid.minor = element_blank(),
            panel.grid.major = element_blank(),
            legend.direction = "vertical", legend.box = "vertical")

    return(gg)
  }

}

            

svg(paste0(OUTPUT_DIR,prefix, "MDS_techReps.svg", ""), width=5, height=4, antialias="none")
PLOT_CH2.2_MDS(LEGO_DGE, "techRep", rep.pal, "organ", organ.shape)
dev.off()

svg(paste0(OUTPUT_DIR,prefix, "MDS_organ.svg", ""), width=5, height=4, antialias="none")
PLOT_CH2.2_MDS(LEGO_DGE, "organ", organ.pal, "clone", clone.shapes, leg2_par=-0.33)
dev.off()

svg(paste0(OUTPUT_DIR,prefix, "MDS_mouse.svg", ""), width=5, height=4, antialias="none")
PLOT_CH2.2_MDS(LEGO_DGE, "mouse", mouse.pal, "clone", clone.shapes, leg2_par=-0.33)
dev.off()


plot_x <- PLOT_CH2.2_MDS(LEGO_DGE, "techRep", rep.pal, "organ", organ.shape, ggplot_MDS=TRUE)
plot_y <- PLOT_CH2.2_MDS(LEGO_DGE, "organ", organ.pal, "clone", clone.shapes, ggplot_MDS=TRUE)
plot_z <- PLOT_CH2.2_MDS(LEGO_DGE, "mouse", mouse.pal, "clone", clone.shapes,  ggplot_MDS=TRUE)


svg(paste0(OUTPUT_DIR,prefix, "MDS.svg", ""), width=15, height=5)
cowplot::plot_grid(plot_x+theme(plot.margin = unit(c(0.8, 0.4, 0, 0.1), "cm"),
                                legend.direction = "horizontal", legend.box = "vertical",
                                legend.position="bottom")+
                     guides(shape = guide_legend(order = 2),col = guide_legend(order = 1)),
                   plot_y+horizTheme+guides(shape = guide_legend(order = 2),col = guide_legend(order = 1)), 
                   plot_z+horizTheme+guides(shape = guide_legend(order = 2),col = guide_legend(order = 1)),
  labels = c("A", "B", "C"), nrow=1, label_x=0.08, label_y=1,hjust =c(0, 2.2,2.2), vjust=1.5)
dev.off()

rm(LEGO_DGE)



#### ---- FIGURE 2: Batch effects (PCA/s) and normalization (RLEs)


### -- RLE
annot_x <- LEGO_DGE_lst$CLONE$samples

## Filtering with stronger thresholds produces better RLEs
plot_x <- ggRLE(LEGO_DGE_lst$CLONE$counts,annot_x, "mouse", mouse.pal, isLog=FALSE,ylim=c(-3,3))
plot_y <- ggRLE(LEGO_DGE_lst$CLONE$logCPM,annot_x, "mouse", mouse.pal,isLog=TRUE,ylim=c(-3,3))
plot_z <- ggRLE(LEGO_DGE_lst$CLONE$batch_corrected,annot_x, "mouse",isLog=TRUE,mouse.pal,ylim=c(-3,3))

svg(paste0(OUTPUT_DIR,prefix, "RLE_counts.svg", ""), width=5, height=7)
print(plot_x)
dev.off()

svg(paste0(OUTPUT_DIR,prefix, "RLE_logCPM.svg", ""), width=5, height=7)
print(plot_y)
dev.off()

svg(paste0(OUTPUT_DIR,prefix, "RLE_batchCorrected.svg", ""), width=5, height=7)
print(plot_z)
dev.off()

plot_combo <- cowplot::plot_grid(plot_x+theme(plot.margin = unit(c(0.8, 0.4, 0, 0.1), "cm"), 
                                              legend.position = "none", axis.title.x=element_blank()),
                                 plot_y+theme(axis.ticks.y=element_blank(), plot.margin = unit(c(0.8, 0.4, 0, 0), "cm"),
                                              axis.text.y=element_blank(), 
                                              axis.title.x=element_blank(),legend.position = "none",
                                              axis.title.y=element_blank()), 
                                 plot_z+theme(axis.ticks.y=element_blank(), plot.margin = unit(c(0.8, 0.4, 0, 0), "cm"),
                                              axis.text.y=element_blank(),
                                              axis.title.y=element_blank(), axis.title.x=element_blank()),
                                 labels = c("A", "B", "C"), nrow=1, rel_widths = c(0.9, 0.8,1),
                                 label_x=0.1, label_y=1,hjust =c(0, 2.1,2.4), vjust=1.5)
plot_combo <- cowplot::add_sub(plot_combo,label="Sample", hjust = 1)
svg(paste0(OUTPUT_DIR,prefix, "RLE.svg", ""), width=12, height=6)
cowplot::ggdraw(plot_combo)
dev.off()



### -- PCA

LeGO_PCA_multiplot(LEGO_DGE_lst$ORGAN, mouse.pal,organ.pal, clone.shapes, 
                   paste0(OUTPUT_DIR,prefix, "PCA.svg", ""))


LeGO_PCA_multiplot(LEGO_DGE_lst$LL, mouse.pal,organ.pal, clone.shapes, 
                   paste0(OUTPUT_DIR,prefix, "PCA_LL.svg", ""))











##### -- 2.3 ORGAN DIFFERENCES  ------------------------------------------------
prefix="CH2.3/CH2.3_"



# ++ 'smear' plot for QC section?

#### ---- FIGURE 3: DEGs HEATMAP

#heatmap3 ColSideAnn for lung/liver scores

# or https://jokergoo.github.io/ComplexHeatmap/
# or https://blog.revolutionanalytics.com/2017/02/superheat-supercharged-heatmaps-for-r.html
# https://bioconductor.statistik.tu-dortmund.de/packages/3.1/bioc/vignettes/ComplexHeatmap/inst/doc/ComplexHeatmap.html

## ++ score minn and landemaine sigs

## for 'bye eye' heatmap if I also include that
# http://jokergoo.github.io/supplementary/ComplexHeatmap-supplementary1-4/supplS1_TCGA_OncoPrint/supplS1_OncoPrint.html


## Ideas for including PCA loadings?
# https://www.researchgate.net/figure/Multivariate-analysis-and-heatmap-plot-of-spinal-cord-lipidomes-of-SOD1-G93A-and-WT_fig4_335125344
 
#### ---- SUPPLEMENTARY FIGURE: FULL DEGs HEATMAP


plotDGE_heatmap <- function(DGE_x, gene_lst, organ_pal, SAVE_PATH, 
                            rn=FALSE, rn_cex=1){

  dat_x <- DGE_x$batch_corrected[!(DGE_x$genes$hgnc_symbol=="") & 
                                   !(duplicated(DGE_x$genes$hgnc_symbol)),]
  rownames(dat_x) <- DGE_x$genes[!(DGE_x$genes$hgnc_symbol=="") & 
                                   !(duplicated(DGE_x$genes$hgnc_symbol)),]$hgnc_symbol
  
  genes_to_plot <- intersect(gene_lst, rownames(dat_x))
  dat_x <- dat_x[genes_to_plot,]
  dat_x <- t(scale(t(dat_x)))
  colnames(dat_x) <- DGE_x$samples$sample
  
  if (rn){
    svg(SAVE_PATH, width=8, height=10)
    heatmap.2(dat_x,trace="none", dendrogram = "column", col=magma,#lhei = c(2,10),lwid = c(2,6),
              labRow=rownames(dat_x),cexCol=1.3,
              Rowv = TRUE,Colv=TRUE,margin=c(10,9),scale = "none", ColSideColors=as.vector(organ_pal[as.vector(DGE_x$samples$organ)]))
    legend("left", title = "Organ",legend=names(organ_pal), 
           fill=as.vector(organ_pal), cex=0.9, box.lty=0)
    dev.off()
  } else {
    svg(SAVE_PATH, width=8, height=8)
    heatmap.2(dat_x,trace="none", dendrogram = "column", col=magma,#lhei = c(2,10),lwid = c(2,6),
              labRow=c(rep("", nrow(dat_x))),cexCol=1.3,cexRow = rn_cex,
              Rowv = TRUE,Colv=TRUE,margin=c(10,9),scale = "none", ColSideColors=as.vector(organ_pal[as.vector(DGE_x$samples$organ)]))
    legend("left", title = "Organ",legend=names(organ_pal), 
           fill=as.vector(organ_pal), cex=0.9, box.lty=0)
    dev.off()
  }
  
}


plotDGE_heatmap(LEGO_DGE_lst$ORGAN, 
                c(LEGO_sigs$OrganUP, LEGO_sigs$OrganDN), 
                organ.pal, 
                paste0(OUTPUT_DIR,prefix, "DEheatmap_ALL.svg", ""))
  

#### ---- FIGURE 4: EYE BALL DEGs HEATMAP
## Stronger LFCs with LL analysis
tr <- glmTreat(glmQLFit(LEGO_DGE_lst$ORGAN, LEGO_DGE_lst$ORGAN$design), contrast=c(-1, 1, 0, 0, 0,0),  lfc=log2(1.5))
tr_LL <- glmTreat(glmQLFit(LEGO_DGE_lst$LL, LEGO_DGE_lst$LL$design), contrast=c(-1, 1, 0, 0, 0),  lfc=log2(1.5))

DE_obj <- topTags(tr, n=Inf, p.value=0.05, adjust.method = "BH", sort.by = "PValue")
DE_obj_LL <- topTags(tr_LL, n=Inf, p.value=0.05, adjust.method = "BH", sort.by = "PValue")

heatmap_genes_union <- intersect(unique(c(DE_obj_LL$table$ensembl_gene_id,DE_obj$table$ensembl_gene_id)),rownames(LEGO_DGE_lst$ORGAN$batch_corrected))
heatmap_genes_union <- LEGO_DGE_lst$ORGAN$genes[match(heatmap_genes_union,LEGO_DGE_lst$ORGAN$genes$ensembl_gene_id),]$hgnc_symbol
heatmap_genes_union <- heatmap_genes_union[!(heatmap_genes_union=="")]
plotDGE_heatmap(LEGO_DGE_lst$ORGAN, 
                heatmap_genes_union, 
                organ.pal, 
                paste0(OUTPUT_DIR,prefix, "DEheatmap_glmTreat.svg", ""),
                rn=TRUE, rn_cex = 0.8)

heatmap_genes <- intersect(intersect(DE_obj_LL$table$ensembl_gene_id,DE_obj$table$ensembl_gene_id),rownames(LEGO_DGE_lst$ORGAN$batch_corrected))
heatmap_genes <- LEGO_DGE_lst$ORGAN$genes[match(heatmap_genes,LEGO_DGE_lst$ORGAN$genes$ensembl_gene_id),]$hgnc_symbol
heatmap_genes <- heatmap_genes[!(heatmap_genes=="")]
plotDGE_heatmap(LEGO_DGE_lst$ORGAN, 
                heatmap_genes, 
                organ.pal, 
                paste0(OUTPUT_DIR,prefix, "DEheatmap_glmTreat_intersect.svg", ""),
                rn=TRUE, rn_cex = 1)

### --- GET GO TERMS
#organ_enrich <- getEnrichedTerms(glm_obj_lst$ORGAN, top_n=200)
organ_LL_enrich <- getEnrichedTerms(glm_obj_lst$LL, top_n=200)
organ_enrich <- organ_LL_enrich

go_mart <- getGOmart(heatmap_genes, organ_enrich, 
                     ensembl_obj, term_lst_lst =TRUE)

gene2GO <- getGeneMembership_GO(heatmap_genes, organ_enrich[grepl("GO",names(organ_enrich))], 
                                go_mart,term_lst_lst =TRUE)

### --- GET KEGG PATHWAYS
entrez_genes <- glm_obj_lst$ORGAN$genes[glm_obj_lst$ORGAN$genes$hgnc_symbol %in% heatmap_genes,]$entrezgene
names(entrez_genes) <- glm_obj_lst$ORGAN$genes[glm_obj_lst$ORGAN$genes$hgnc_symbol %in% heatmap_genes,]$hgnc_symbol
entrez_genes <- entrez_genes[!(is.na(entrez_genes))]
kegga <- getKEGGmart(unique(names(c(organ_enrich$KEGG_up, organ_enrich$KEGG_dn))))

gene2KEGG <- getGeneMembership_KEGG(entrez_genes, 
                       organ_enrich[grepl("KEGG",names(organ_enrich))], 
                       kegga)


heatmap_annot_dat <- data.frame()
for (x_gene in names(gene2GO)){
  
  gene_row <- c()
  x_lst <- gene2GO[[x_gene]]
  x_lst <- as.vector(unlist(x_lst[grepl("_up",names(x_lst))]))
  y_lst <- gene2KEGG[[x_gene]]
  y_lst <- as.vector(unlist(y_lst[grepl("_up",names(y_lst))]))
  
  for (x_go in unique(as.vector(unlist(gene2GO)))){
     if (x_go %in% x_lst){
       gene_row <- c(gene_row, "Y")
     } else {
       gene_row <- c(gene_row, "N")
     }
  }
  
  for (x_kegg in unique(as.vector(unlist(gene2KEGG)))){
    if (x_kegg %in% y_lst){
      gene_row <- c(gene_row, "Y")
    } else {
      gene_row <- c(gene_row, "N")
    }
  }
  
  heatmap_annot_dat <- rbind(heatmap_annot_dat,gene_row)
}

for (x_gene in setdiff(heatmap_genes,names(gene2GO))){
  heatmap_annot_dat <- rbind(heatmap_annot_dat,rep("N",dim(heatmap_annot_dat)[2]))
}

colnames(heatmap_annot_dat) <- c(unique(as.vector(unlist(gene2GO))), unique(as.vector(unlist(gene2KEGG))))
rownames(heatmap_annot_dat) <- c(names(gene2GO), setdiff(heatmap_genes,names(gene2GO)))


#xx=heatmap_annot_dat[rownames(heatmap_annot_dat) %in% unlist(lapply(strsplit(names(unlist(gene2GO)[grepl("up",names(unlist(gene2GO)))]), "[.]"), function(x){x[[1]]})),][,colnames(heatmap_annot_dat) %in% unique(as.vector( unlist(gene2GO)[grepl("up",names(unlist(gene2GO)))]))]
#yy=heatmap_annot_dat[rownames(heatmap_annot_dat) %in% unlist(lapply(strsplit(names(unlist(gene2KEGG)[grepl("up",names(unlist(gene2KEGG)))]), "[.]"), function(x){x[[1]]})),][,colnames(heatmap_annot_dat) %in% unique(as.vector( unlist(gene2KEGG)[grepl("up",names(unlist(gene2KEGG)))]))]

#zz=heatmap_annot_dat[rownames(heatmap_annot_dat) %in% unlist(lapply(strsplit(names(unlist(gene2GO)[grepl("dn",names(unlist(gene2GO)))]), "[.]"), function(x){x[[1]]})),][,colnames(heatmap_annot_dat) %in% unique(as.vector( unlist(gene2GO)[grepl("up",names(unlist(gene2GO)))]))]

### --- Selecting go/kegg to plot -- skip
#KEGG_to_plot <- names(sort(table(as.vector(unlist(gene2KEGG))), decreasing = T)[1:16])
#sort(table(as.vector(unlist(gene2GO))), decreasing = T)
#GO_to_plot <- names(sort(table(as.vector(unlist(gene2GO))), decreasing = T)[1:33])

GOEnrich <- goana(glm_obj_lst$LL, species="Hs", 
                  geneid=glm_obj_lst$LL$genes$entrezgene, FDR=0.05)
KEGGEnrich <- kegga(glm_obj_lst$LL, species="Hs", 
                    geneid=glm_obj_lst$LL$genes$entrezgene, FDR=0.05)
GOEnrich[rownames(GOEnrich) %in% GO_to_plot,]
KEGGEnrich[rownames(KEGGEnrich) %in% KEGG_to_plot,]

# USE FRY OR ROAST
# https://www.bioconductor.org/packages/devel/workflows/vignettes/RnaSeqGeneEdgeRQL/inst/doc/edgeRQL.html
# for this: https://jokergoo.github.io/ComplexHeatmap/

#names(sort(table(as.vector(unlist(gene2GO)[grepl("up",names(unlist(gene2GO)))])), decreasing=T)[1:6])
#GO_to_plot <- c("GO:0007155", "GO:0007160", "GO:0008009", "GO:0005201", "GO:0005125")



GO_to_plot <- c("GO:0000122", "GO:0005125", "GO:0008009", "GO:0071222")
KEGG_to_plot <- c("path:hsa04060", "path:hsa04668", "path:hsa04657", "path:hsa04064", "path:hsa04390")

#heatmap_annot_dat[, colnames(heatmap_annot_dat) %in% c(GO_to_plot,KEGG_to_plot)]



## get expression data
dat_x <- LEGO_DGE_lst$ORGAN$batch_corrected[!(LEGO_DGE_lst$ORGAN$genes$hgnc_symbol=="") & 
                                 !(duplicated(LEGO_DGE_lst$ORGAN$genes$hgnc_symbol)),]
rownames(dat_x) <- LEGO_DGE_lst$ORGAN$genes[!(LEGO_DGE_lst$ORGAN$genes$hgnc_symbol=="") & 
                                 !(duplicated(LEGO_DGE_lst$ORGAN$genes$hgnc_symbol)),]$hgnc_symbol
genes_to_plot <- intersect(heatmap_genes, rownames(dat_x))
dat_x <- dat_x[genes_to_plot,]
dat_x <- t(scale(t(dat_x)))
colnames(dat_x) <- LEGO_DGE_lst$ORGAN$samples$sample


## annot dat
annot_dat <- as.data.frame(heatmap_annot_dat[, colnames(heatmap_annot_dat) %in% c(GO_to_plot,KEGG_to_plot)])
GO_dict <- setNames(GOEnrich$Term, rownames(GOEnrich))[GO_to_plot]
KEGG_dict <- setNames(KEGGEnrich$Pathway, rownames(KEGGEnrich))[KEGG_to_plot]
term_dict <- c(GO_dict, KEGG_dict)
term_dict[["GO:0000122"]] = "neg. reg. of transcription by RNA poly. II"
colnames(annot_dat) <- str_to_title(as.vector(term_dict[colnames(annot_dat)])) 

## annot colours
term.pal = c("#51806a", "white")  #325756
names(term.pal)=c("Y", "N")
term.pal_lst <- lapply(1:length(colnames(annot_dat)), function(x){term.pal})
names(term.pal_lst) <- colnames(annot_dat)


## LL SINGSCORES
xx=reshape2::dcast(ALL_singscores[(ALL_singscores$Sig %in% c("LUNG_PCA", "LIVER_PCA")) & (ALL_singscores$Dataset=="LEGO_organ"),], Sig ~ Sample, value.var = "Score")
rownames(xx) <- xx$Sig
xx <- xx[,!(colnames(xx) == "Sig")]
xx <- as.data.frame(t(xx))
colnames(xx) <- c('Liver', "Lung")
xx <- xx[!(grepl("Ms4",rownames(xx))),]
xx <- xx[colnames(LEGO_DGE_lst$ORGAN$batch_corrected),]
#LUNG_pal=c(blend_colours("white","#FAE093",10), blend_colours("#FAE093","#A07808",90))
#LIVER_pal=c(blend_colours("white","#7C7189",50), blend_colours("#7C7189","#3E3945",50))

max_c = round(max(xx), digits=1)
lung_pal = colorRamp2(c(min(xx$Lung)-0.01, quantile(xx$Lung, 0.5)[[1]], max_c), c("white","#FAE093", "#7C5D06"))
liver_pal = colorRamp2(c(min(xx$Liver)-0.02, quantile(xx$Liver, 0.5)[[1]], max_c), c("white","#7C7189", "#2A262E"))

ht_obj <- Heatmap(dat_x,row_names_side = "right", col=magma(100),column_dend_height = unit(15, "mm"),
                  show_row_dend=FALSE,show_column_names =FALSE,
        top_annotation=HeatmapAnnotation(Organ = as.vector(LEGO_DGE_lst$ORGAN$samples$organ),
                                         col = list(Organ = organ.pal),
                                       #  annotation_name_side ="right"
                                         show_annotation_name =FALSE),
        right_annotation=rowAnnotation(df=annot_dat[rownames(dat_x),],
                                      col=term.pal_lst,show_legend=FALSE, 
                                       annotation_name_rot=-40,annotation_name_side ="bottom",
                                      annotation_name_gp =gpar(fontsize = 9.5), gap=unit(2, "mm")),
        heatmap_legend_param =list(title="Log-Expression"),
        column_dend_reorder=ifelse(LEGO_DGE_lst$ORGAN$samples$organ=="Lung", 2, 1),
        bottom_annotation = HeatmapAnnotation(Lung=xx$Lung,
                                              Liver=xx$Liver,
                                              col = list(Liver = liver_pal, Lung=lung_pal),
                                                annotation_name_side ="left",
                                              show_annotation_name =FALSE, show_legend = TRUE,
                                              annotation_legend_param= list(Lung = list(title = "Lung Score"), Liver=list(title = "Liver Score"))))
#draw(ht_obj, heatmap_legend_side="left") # annotation_legend_side

svg(paste0(OUTPUT_DIR,prefix, "DEheatmap_glmTreat_intersect_annot.svg", ""), width=14,height=10)
draw(ht_obj,merge_legends=T,heatmap_legend_side ="left",
     ht_gap  = unit(4, "mm"), auto_adjust = TRUE, padding=unit(c(1, 1, 1, 2), "cm"))
dev.off()



#### ---- MA PLOT TO SHOW BIAS TO LUNG
de_table = toptags_lst$LL$table[toptags_lst$LL$table$FDR < 0.05,]
genes_of_interest = c("ANGPTL4","CXCL1","CXCL2","EREG","FSCN1","MMP1","PTGS2","VCAM1") #"TNC",
genes_of_interest = genes_of_interest[genes_of_interest %in% de_table$hgnc_symbol]

volcanoData <- topTags(glm_obj_lst$LL, Inf)$table
volcano_DE <- ifelse(rownames(volcanoData) %in% rownames(de_table), "Down", "Not Sig")
volcano_DE <- replace(volcano_DE, (volcanoData$logFC>0) & (rownames(volcanoData) %in% rownames(de_table)), "Up")
volcano_df <- data.frame(LFC=volcanoData$logFC, Pval=-log10(volcanoData$PValue),
           isDE=volcano_DE, geneID=volcanoData$hgnc_symbol,
           plotGene=volcanoData$hgnc_symbol %in% genes_of_interest)

library(ggrepel)
volcano.pal = c()
volcano.pal["Not Sig"] = "grey"
volcano.pal["Down"]=organ.pal[["Liver"]]
volcano.pal["Up"]=organ.pal[["Lung"]]
FDR_thresh=-log10(0.004)
ggVolcano <- ggplot(data=volcano_df, aes(x=LFC, y=Pval, colour=isDE))+
  geom_point(shape=19, size=1)+
  scale_colour_manual(values=volcano.pal)+theme_bw()+
  labs(y="-log10(Pval)",x="LogFC", colour="Significance")+
  geom_hline(yintercept = FDR_thresh,linetype ="dotted",colour="black")+
 # geom_text(aes(min(volcano_df$`LFC`), FDR_thresh, fontface="plain",label = "FDR=0.05", vjust = -0.5),colour="darkgrey", size = 3)+
  theme(panel.grid.minor = element_blank())+ #legend.box.margin = margin(0,0,0,0)
  guides(colour = guide_legend(override.aes = list(shape = 19, size = 3)))
ggVolcano <- ggVolcano + geom_label_repel(data=volcano_df[volcano_df$plotGene,],
                             aes(x=LFC, y=Pval, label=geneID),
                             colour="#D09C0A",segment.color = '#D09C0A',
                             box.padding   = 0.35,point.padding = 0.7,
                             nudge_x=0.6, nudge_y=0.25,
                             min.segment.length=unit(0.05, "cm"))

svg(paste0(OUTPUT_DIR,prefix, "volcano.svg", ""), width=9,height=8)
print(ggVolcano)
dev.off()



#### ---- FIGURE 5 (?): GENE BOX PLOTS
# MIR216A,B & 	MIR335
genes_to_plot = c("ANGPTL4","FSCN1","PTGS2", #COX2
                  "MMP1", "EREG", "CXCL1", "CXCL2", "TNC","VCAM1")
xx=LEGO_DGE_lst$ORGAN$genes[LEGO_DGE_lst$ORGAN$genes$hgnc_symbol %in% genes_to_plot,]
gene_dict = setNames(xx$hgnc_symbol, rownames(xx))


plot_dat=reshape2::melt(LEGO_DGE_lst$ORGAN$batch_corrected[names(gene_dict),])
plot_dat$GeneID = as.vector(gene_dict[plot_dat$Var1])
plot_dat$Organ = as.vector(LEGO_DGE_lst$ORGAN$samples$organ[match(plot_dat$Var2, rownames(LEGO_DGE_lst$ORGAN$samples))])

svg(paste0(OUTPUT_DIR,prefix, "geneBoxplots.svg", ""), width=7,height=6)
ggplot(plot_dat, aes(x=Organ, y=value, fill=Organ))+geom_boxplot()+facet_wrap(vars(GeneID))+scale_fill_manual(values=organ.pal)+
  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), strip.text = element_text(size=14))+
  labs(x="", y="logCPM")
dev.off()





#### ---- FIGURE 6 (?): TCGA GENE SET COMPARISON BOXPLOTS



### ---- LOAD TCGA

plot_df <- LoadTCGAscores(ALL_singscores, 
           SIGS_vec=unique(ALL_singscores$Sig)[!(grepl("HALLMARK|CLONE|vs",unique(ALL_singscores$Sig)))])
#plot_df <- LoadTCGAscores(ALL_singscores_stable, SIGS_vec=c("LUNG", "LIVER", "Lung_Landemaine", "Lung_Minn", "LUNG_PCA", 
#                                                            "VisceralMet", "Lung_lit","LIVER_PCA"))

##### ---- SCORE TCGA BOXPLOTS ALL SIGS
geneset_lengths = unlist(lapply(LEGO_sigs_lfc[grepl("UP_.*[.]", names(LEGO_sigs_lfc))], function(x){paste0(" \n (n=",length(x),")")}))
names(geneset_lengths) <- names(LEGO_sigs_lfc[grepl("UP_.*[.]", names(LEGO_sigs_lfc))])
geneset_lengths["LUNG_PCA"] = paste0(" \n (n=", length(LEGO_sigs$OrganUP_PCA),")")
plot_df_xx = plot_df[(plot_df$CancerType %in% c("LUNG", "LIVER", "BREAST")) &
                       (grepl("UP_.*[.]|LUNG_PCA", plot_df$Sig)),]
plot_df_xx$Sig = paste0(plot_df_xx$Sig, as.vector(geneset_lengths[plot_df_xx$Sig]))
plot_df_xx$Sig = gsub("OrganUP_", "LFC ", plot_df_xx$Sig)
plot_df_xx$Sig= factor(plot_df_xx$Sig,
                       levels=c("LUNG_PCA \n (n=121)",unique(plot_df_xx$Sig[grepl("[.]", plot_df_xx$Sig)])))

svg(paste0(OUTPUT_DIR,prefix, "Supp_TCGA_OrganUPscoreComparison_Boxplots.svg", ""), width=16, height=8)
ggplot(data=plot_df_xx, aes(x=Sig, y=Score, fill=CancerType))+geom_boxplot()+
  theme(axis.text.x=element_text(angle=45, size=10, hjust = 1),# axis.ticks.x=element_blank(),axis.title.x=element_blank(),
        strip.text.x=element_text(size=14), 
        legend.text=element_text(size=10), legend.title=element_text(size=12))+
  scale_fill_manual(values=tcga_pal[c("LUNG", "LIVER", "BREAST")])
dev.off()


##### ----- SCORE TCGA BOXPLOTS LUNG SIGS
plot_df_xx = plot_df[(plot_df$CancerType %in% c("LUNG", "LIVER", "BREAST")) &
                       !(grepl("[.]|_lit|Met", plot_df$Sig)),]
plot_df_xx$Sig <- as.vector(setNames(c("LeGO Lung","LeGO Liver","Landemaine Lung","Minn Lung"),
                                  c("LUNG_PCA","LIVER_PCA", "Lung_Landemaine", "Lung_Minn"))[plot_df_xx$Sig])
plot_df_xx$Sig <- factor(plot_df_xx$Sig,levels=c("LeGO Liver","LeGO Lung","Minn Lung", "Landemaine Lung"))

gg_ByCancerType <- ggplot(data=plot_df_xx, aes(x=CancerType, y=Score, fill=CancerType))+geom_boxplot()+
  facet_wrap(~Sig, nrow=1)+ ylim(-0.2, 0.25)+ #scales = "free_y"
  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.title.x=element_blank(),
        strip.text.x=element_text(size=16), 
        legend.text=element_text(size=10), legend.title=element_text(size=12))+
  scale_fill_manual(values=tcga_pal[c("LUNG", "LIVER", "BREAST")])
svg(paste0(OUTPUT_DIR,prefix, "TCGA_Organ_Boxplots_ByCancerType.svg", ""), width=12, height=6)
gg_ByCancerType
dev.off()


##### ----- SCORE TCGA BOXPLOTS LUNG SIGS -- BY TISSUE
names(tcga_pal) <- c("LUNG","LIVER","BREAST","NA","OTHER \nCARCINOMA")

plot_df$TissueOrigin_col <- replace(plot_df$TissueOrigin, !(plot_df$TissueOrigin %in% c("LUNG", "LIVER", "BREAST")), "OTHER \nCARCINOMA")
plot_df_xx = plot_df[!(grepl("[.]|_lit|Met", plot_df$Sig)),]
plot_df_xx$Sig <- as.vector(setNames(c("LeGO Lung","LeGO Liver","Landemaine Lung","Minn Lung"),
                                     c("LUNG_PCA","LIVER_PCA", "Lung_Landemaine", "Lung_Minn"))[plot_df_xx$Sig])
plot_df_xx$Sig <- factor(plot_df_xx$Sig,levels=c("LeGO Liver","LeGO Lung","Minn Lung", "Landemaine Lung"))

gg_ByTissue <- ggplot(data=plot_df_xx, aes(x=TissueOrigin, y=Score, fill=TissueOrigin_col))+geom_boxplot()+
  facet_wrap(~Sig, nrow=1)+ ylim(-0.2, 0.25)+ #scales = "free_y"
  theme(axis.text.x=element_text(angle=45, size=8, hjust = 1), #axis.ticks.x=element_blank(),axis.title.x=element_blank(),
        strip.text.x=element_text(size=16), 
        legend.text=element_text(size=10), legend.title=element_text(size=12))+
  labs(x="Tissue of Origin",fill="Tissue of Origin")+
  scale_fill_manual(values=tcga_pal[c("LUNG", "LIVER", "BREAST","OTHER \nCARCINOMA")])

svg(paste0(OUTPUT_DIR,prefix, "TCGA_Organ_Boxplots_ByTissue.svg", ""), width=12, height=6)
gg_ByTissue
dev.off()


##### ----- BY TCGA BRCA SUBTYPE

plot_df_xx = plot_df[(plot_df$CancerType %in% c("LUNG", "LIVER", "BREAST")) &
                       !(grepl("[.]|_lit|Met", plot_df$Sig)),]
plot_df_xx$Sig <- as.vector(setNames(c("LeGO Lung","LeGO Liver","Landemaine Lung","Minn Lung"),
                                     c("LUNG_PCA","LIVER_PCA", "Lung_Landemaine", "Lung_Minn"))[plot_df_xx$Sig])
plot_df_xx$Sig <- factor(plot_df_xx$Sig,levels=c("LeGO Liver","LeGO Lung","Minn Lung", "Landemaine Lung"))
plot_df_brca <- FilterTCGAscores_brca(plot_df_xx, ALL_singscores)

gg_ByBrCaSubtype <- ggplot(data=plot_df_brca, aes(x=Subtype, y=Score, fill=Subtype))+geom_boxplot()+
  facet_wrap(~Sig, nrow=1) + ylim(-0.2, 0.25)+ 
  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.title.x=element_blank(),
        strip.text.x=element_text(size=14), 
        legend.text=element_text(size=10), legend.title=element_text(size=12))+
  scale_fill_manual(values=Colours_brca_subtype)

svg(paste0(OUTPUT_DIR,prefix, "TCGA_BrCaSubtype_Boxplots.svg", ""), width=12, height=6)
gg_ByBrCaSubtype
dev.off()



##### ----- ALL TCGA TOGETHER

svg(paste0(OUTPUT_DIR,prefix, "TCGA_Boxplots_ALL.svg", ""), width=12, height=12)
cowplot::plot_grid(gg_ByCancerType+theme(legend.text = element_text(size=10,hjust=0.5),
                                         legend.margin = margin(0,0,0,25)), 
                   gg_ByBrCaSubtype+theme(legend.text = element_text(size=8),
                                          legend.title=element_text(size=12,hjust=0.5)),
                   gg_ByTissue+theme(legend.text = element_text(size=8),
                                     legend.title=element_text(size=11,hjust=0.5),
                                     axis.title.x=element_blank()), 
                   ncol=1,nrow=3,rel_heights = c(0.8,0.8,1))
                 #  ,
                 #  rel_widths = c(0.5,0.9,2),rel_heights = c(0.8,0.8,1))
dev.off()






##### ----- CCLE ----------------

plot_df = LoadCCLEscores(ALL_singscores, return="ALL",SIGS_vec=c("LUNG_PCA", "LIVER_PCA", "Lung_Landemaine", "Lung_Minn"))
plot_df$Sig <- as.vector(setNames(c("LeGO Liver", "LeGO Lung","Landemaine Lung","Minn Lung"),
                                  c("LIVER_PCA", "LUNG_PCA", "Lung_Landemaine", "Lung_Minn"))[plot_df$Sig])
plot_df$Sig <- factor(plot_df$Sig,levels=c("LeGO Liver","LeGO Lung", "Minn Lung", "Landemaine Lung"))
plot_df <- plot_df[!(grepl("FIBROBLAST",plot_df$Sample)),]


plot_df_X <- plot_df[plot_df$Sample_type %in%
                       c("BREAST") & 
                       plot_df$tissueOrigin %in%
                       c("BREAST_TISSUE", "PLEURA_TISSUE", "LIVER_TISSUE", "LUNG_TISSUE"),]
plot_df_y <- plot_df[plot_df$Sample_type %in%
                       c("BREAST", "LUNG", "LIVER") & 
                       plot_df$tissueOrigin %in%
                       c("BREAST_TISSUE", "PLEURA_TISSUE", "LIVER_TISSUE", "LUNG_TISSUE"),]
gg_ByTissue_X <-  ggplot(data=plot_df_X, aes(x=tissueOrigin, y=Score, fill=tissueOrigin))+
  geom_boxplot()+
  scale_fill_manual(values=CCLEtissue.pal[!(names(CCLEtissue.pal))==""])+
  facet_wrap(~Sig, ncol=4)+labs(fill="Tissue of Origin")+ #scales = "free_y"
  theme(axis.text.x=element_blank(), axis.title.x=element_blank(), axis.ticks.x = element_blank(),
        strip.text.x=element_text(size=14), 
        legend.text=element_text(size=10), legend.title=element_text(size=12))+ ylim(-0.26, 0.25)

gg_ByTissue_Y <- ggplot(data=plot_df_y, aes(x=tissueOrigin, y=Score, fill=tissueOrigin))+
  geom_boxplot()+
  scale_fill_manual(values=CCLEtissue.pal[!(names(CCLEtissue.pal))==""])+
  facet_wrap(~Sig, ncol=4)+labs(fill="Tissue of Origin")+ #scales = "free_y"
  theme(axis.text.x=element_blank(), axis.title.x=element_blank(), axis.ticks.x = element_blank(),
        strip.text.x=element_text(size=14), 
        legend.text=element_text(size=10), legend.title=element_text(size=12))+ ylim(-0.26, 0.25)

plot_df_x <- plot_df[(plot_df$Sample_type %in% c("BREAST", "LIVER", "LUNG")) &
                       plot_df$Type == "PRIMARY",]
CCLEorgan.pal["MESOTHELIOMA"] = CCLEtissue.pal["PLEURA_TISSUE"]
gg_CancerType <- ggplot(data=plot_df_x, aes(x=Sample_type, y=Score, fill=Sample_type))+
  geom_boxplot()+
  scale_fill_manual(values=CCLEorgan.pal[!(names(CCLEorgan.pal))=="MESOTHELIOMA"])+
  facet_wrap(~Sig, ncol=4)+labs(fill="Cancer Type")+ #,scales = "free_y"
  theme(axis.text.x=element_blank(), axis.title.x=element_blank(), axis.ticks.x = element_blank(),
        strip.text.x=element_text(size=14), 
        legend.text=element_text(size=10), legend.title=element_text(size=12))+ ylim(-0.26, 0.25)


svg(paste0(OUTPUT_DIR,prefix, "CCLE_Boxplots_ALL.svg", ""), width=10, height=8)
cowplot::plot_grid(gg_CancerType+theme(legend.text = element_text(size=10),
                                       legend.margin = margin(0,20,0,25)),
                   gg_ByTissue_Y+theme(legend.text = element_text(size=9,hjust=0.5)), 
                   ncol=1,nrow=2, labels=c("A", "B")) #,rel_heights = c(0.8,0.8,1))
dev.off()


##### ----- BROCADE ----------------

BROCADE_scores_df <- as.data.frame(score_df$Scores)
BROCADE_scores_df$Sig <- rownames(BROCADE_scores_df)
BROCADE_scores_df_melt <- melt(BROCADE_scores_df,value.name = "Score", variable.name = "Sample")
BROCADE_scores_df_melt$Dataset <- rep("BROCADE", nrow(BROCADE_scores_df_melt))
BROCADE_scores_df_melt$Sample_type <- as.vector(setNames(BROCADE_DGE$samples$organ,BROCADE_DGE$samples$sample)[as.vector(BROCADE_scores_df_melt$Sample)])
BROCADE_scores_df_melt$PatientID <- as.vector(setNames(BROCADE_DGE$samples$patient,BROCADE_DGE$samples$sample)[as.vector(BROCADE_scores_df_melt$Sample)])
BROCADE_scores_df_melt$Sample_type <- factor(BROCADE_scores_df_melt$Sample_type, levels=c("Liver", "Lung"))

plot_dat = BROCADE_scores_df_melt[grepl("Organ",BROCADE_scores_df_melt$Sig),]
plot_dat = plot_dat[order(plot_dat$Sample_type),]
#plot_dat = plot_dat[order(plot_dat$PatientID),]
plot_dat$Sample = factor(as.vector(plot_dat$Sample), levels=unique(as.vector(plot_dat$Sample)))
plot_dat$PatientID <- paste0("Patient ID:",plot_dat$PatientID )
plot_dat$PatientID = factor(as.vector(plot_dat$PatientID), levels=unique(as.vector(plot_dat$PatientID)))
svg(paste0(OUTPUT_DIR,prefix, "BROCADE_Boxplots.svg", ""), width=10, height=4)
ggplot(data=plot_dat, aes(x=Sample,y=Score,fill=Sample_type))+geom_boxplot()+
  facet_wrap(~PatientID, scales = "free_x")+scale_fill_manual(values=organ.pal[c("Lung", "Liver")])+
  labs(x="Sample", fill="Organ") +
  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), strip.text = element_text(size=12))
dev.off()




#### ---- FIGURE 7 (?): TNF PLOTS AS POTENTIAL MECHANISM

## + vissE as a Supp?




##### ----- PYRAMIDS  -----

## Get TNF genes -- HM
HM_Sigs <- GetMSigDB()
TNFgenes_lego <- HM_Sigs$HALLMARK_TNFA_SIGNALING_VIA_NFKB[HM_Sigs$HALLMARK_TNFA_SIGNALING_VIA_NFKB %in% c(toptags_lst$LL$table$hgnc_symbol)]
TNFgenes_brocade <- HM_Sigs$HALLMARK_TNFA_SIGNALING_VIA_NFKB[HM_Sigs$HALLMARK_TNFA_SIGNALING_VIA_NFKB %in% tt_BROCADE$hgnc_symbol]

## Get TNF genes -- KEGG
KEGGA <- getGeneKEGGLinks("hsa", convert=TRUE)
ENTREZ_genes <- KEGGA[KEGGA$PathwayID %in% c("path:hsa04668"),]$GeneID
TNFgenes_lego_entrez <- ENTREZ_genes[ENTREZ_genes %in% toptags_lst$LL$table$entrezgene[!(is.na(toptags_lst$LL$table$entrezgene))]]
TNFgenes_brocade_entrez <- ENTREZ_genes[ENTREZ_genes %in% tt_BROCADE$entrezgene[!(is.na(tt_BROCADE$entrezgene))]]
TNF_entrez <- union(TNFgenes_lego_entrez,TNFgenes_brocade_entrez)
TNF_genes <- BROCADE_DGE$genes[match(TNF_entrez, 
                            BROCADE_DGE$genes$entrezgene),]$hgnc_symbol
TNF_genes[is.na(TNF_genes)] = "CSF2"

## PLOT
gg_ORGAN_HM = GenePyramid_2Datsets_v2(toptags_lst$LL[toptags_lst$LL$table$FDR < 0.05 ,]$table,
                                   tt_BROCADE, 
                        "LeGO", "BROCADE", 
                        intersect(TNFgenes_lego, TNFgenes_brocade), 
                        UP_str="Lung", DOWN_str="Liver", 
                        UP_col="#D09C0A", DOWN_col=organ.pal[["Liver"]],
                        return=TRUE)

gg_ORGAN_KEGG = GenePyramid_2Datsets_v2(toptags_lst$LL[toptags_lst$LL$table$FDR < 0.05 ,]$table,
                                      tt_BROCADE, 
                                      "LeGO", "BROCADE", 
                                      TNF_genes, 
                                      UP_str="Lung", DOWN_str="Liver", 
                                      UP_col="#D09C0A", DOWN_col=organ.pal[["Liver"]],
                                      return=TRUE)


grid.newpage()
grid.draw(gg_ORGAN_HM)

grid.newpage()
grid.draw(gg_ORGAN_KEGG)


##### ----- TNF IN GTEX  -----

load(file="/stornext/Home/data/allstaff/w/whitfield.h/data_load/GTEx_DGE.Rdata") # GTEx_DGE



plot_dat = data.frame(TNF=GTEx_DGE$logCPM[rownames(GTEx_DGE$logCPM)=="ENSG00000232810",],
                      Organ=as.vector(GTEx_DGE$samples$group))
gg_GTEx_violin <- ggplot(data = plot_dat, aes(x=Organ, y = TNF, fill=Organ)) +
  geom_violin()+ggtitle(paste0("C) TNF","\u03b1"," Expression in GTEx"))+
  theme(panel.grid.minor = element_blank(), plot.margin = margin(5,0,5,0),
        plot.title = element_text(size = 14, hjust = 0, margin = margin(0,0,10,0)),
        axis.title.x=element_blank(), axis.text.x = element_blank(), axis.ticks.x=element_blank())+
  scale_fill_manual("Organ", values = organ.pal[c("Lung", "Liver")])+labs(y = "TNF (LogCPM)")


##### ----- FINAL TNF  -----
svg(paste0(OUTPUT_DIR,prefix, "TNFplots.svg", ""), width=14, height=8)
grid.arrange(cowplot::plot_grid(NULL,NULL,
          gg_ORGAN_KEGG,
          gg_ORGAN_HM, 
          labels = c("A) KEGG TNF signaling pathway", "B) Hallmarks TNF\u03b1 signaling pathway via NF-\u03BA \u0392"), 
          rel_heights=c(0.4,12),label_fontface ="plain",hjust =c(-0.07,-0.04),label_size=14,
          ncol=2, nrow=2)+theme(plot.margin = margin(0,20,0,0)),
          gg_GTEx_violin, ncol=2, widths=c(2,1))
dev.off()





#### ---- FIGURE 8 (?): RT EXPERIMENT PROCESSING


### --- RT QC PLOTS
annot_x <- LEGO_DGE_lst$RT$samples
colnames(LEGO_DGE_lst$RT$counts) <- rownames(annot_x)
colnames(LEGO_DGE_lst$RT$batch_corrected) <- rownames(annot_x)

plot_x <- ggRLE(LEGO_DGE_lst$RT$counts,annot_x, 
                "mouse", mouseRT.pal, isLog=FALSE,ylim=c(-1,1))
plot_y <- ggRLE(LEGO_DGE_lst$RT$batch_corrected,annot_x, 
                "mouse", mouseRT.pal,isLog=TRUE,ylim=c(-1,1))

plot_z <- ggPCA(LEGO_DGE_lst$RT$batch_corrected, LEGO_DGE_lst$RT$samples,
                  "organ", organ.pal[c("Lung", "Liver")],shape_str="mouse", mouseRT.shapes,
                  LOG=TRUE, CENTRE=TRUE)

RTmouse_leg <- cowplot::get_legend(plot_x+horizTheme+
                                     theme(legend.key.size=unit(1, 'cm'),
                                           legend.text=element_text(size=12)))
RT_leg <- cowplot::get_legend(plot_z+horizTheme+
                                theme(legend.margin = margin(-1,-1,-6,-1)))

### --- RT SINGSCORE PLOT
load(file=paste0(DATA_DIR, "LEGO_DGE.Rdata")) 
score_x <- ALL_singscores[(ALL_singscores$Dataset %in% c("LEGO_organ")) & (ALL_singscores$Sig %in% c("LUNG_PCA", "LIVER_PCA")),]
score_x$Organ <- as.vector(setNames(as.vector(LEGO_DGE_organ$samples$organ), rownames(LEGO_DGE_organ$samples))[score_x$Sample])
score_x$Clone <- as.vector(setNames(as.vector(LEGO_DGE_organ$samples$clone), rownames(LEGO_DGE_organ$samples))[score_x$Sample])
score_x$RT <- as.vector(setNames(ifelse(LEGO_DGE_organ$samples$mouse %in% c("M4", "M5", "M6"), "Retrans.", "Orig."),
                                 rownames(LEGO_DGE_organ$samples))[score_x$Sample])
score_x = score_x %>% pivot_wider(names_from = Sig, values_from = Score)

gg_RTscores <- ggplot(data=score_x, aes(x=LUNG_PCA,y=LIVER_PCA,color=Clone, fill=Organ, shape=RT))+geom_point(size=3, stroke=2, alpha=0.8)+
  scale_fill_manual(values=organ.pal) + scale_color_manual(values=clone_grey.pal)+
  scale_shape_manual(values=c(21,23), name="Experiment")+
  theme_bw()+ guides(fill = guide_legend(order=1, override.aes = list(shape=21)))+
  theme(legend.margin = margin(-1,-1,-1,-1))+
  labs(x="Lung Score", y="Liver Score")


### --- BRING ALL TOGETHER NOW
svg(paste0(OUTPUT_DIR,prefix, "RT_ALL.svg", ""), width=12, height=10)
cowplot::plot_grid(cowplot::plot_grid(cowplot::plot_grid(plot_x+theme(legend.position = "none",
                                                                      plot.margin = unit(c(0.8, 0.4, -0.25, 0.2), "cm")),
                                                         plot_y+theme(legend.position = "none",axis.ticks.y=element_blank(),
                                                                      axis.text.y=element_blank(),axis.title.y=element_blank(),
                                                                      plot.margin = unit(c(0.8, 0.4, -0.25, 0.5), "cm")), 
                                                         plot_z+theme(legend.position = "none",
                                                                      plot.margin = unit(c(0.8, 0.4, -0.5, 0.5), "cm")),
                                                         labels = c("A", "B", "C"), nrow=1,ncol=3),
                                      grid.arrange(RTmouse_leg, RT_leg, 
                                                   layout_matrix=rbind(c(NA, 1,NA,  2, NA)),
                                                   widths=c(2,2,2,2,0.1)),
                                      nrow=2, rel_heights = c(5,2.5)),
                   gg_RTscores+theme(plot.margin = margin(10,130,0,130),
                                     legend.position = "bottom",
                                     legend.direction = "horizontal", 
                                     legend.box = "horizontal",
                                     legend.margin = margin(8,8,8,8)), 
                   nrow=2, rel_heights = c(4,5),labels=c("", "D"))
dev.off()


### --- SUPPLEMENTARY PCAs
LeGO_PCA_multiplot(LEGO_DGE_lst$RT, mouseRT.pal,organ.pal, clone.shapes, 
                   paste0(OUTPUT_DIR,prefix, "Supp_PCA_RT.svg", ""))





#### ---- FIGURE 9 (?): RT TNF SIGNALLING PYRAMIDS


## Get TNF genes -- HM
HM_Sigs <- GetMSigDB()
TNFgenes_original <- HM_Sigs$HALLMARK_TNFA_SIGNALING_VIA_NFKB[HM_Sigs$HALLMARK_TNFA_SIGNALING_VIA_NFKB %in% c(toptags_lst$LL$table$hgnc_symbol)]
TNFgenes_RT <- HM_Sigs$HALLMARK_TNFA_SIGNALING_VIA_NFKB[HM_Sigs$HALLMARK_TNFA_SIGNALING_VIA_NFKB %in% toptags_lst$RT$table$hgnc_symbol]

## Get TNF genes -- KEGG
KEGGA <- getGeneKEGGLinks("hsa", convert=TRUE)
ENTREZ_genes <- KEGGA[KEGGA$PathwayID %in% c("path:hsa04668"),]$GeneID
TNFgenes_original_entrez <- ENTREZ_genes[ENTREZ_genes %in% toptags_lst$LL$table$entrezgene[!(is.na(toptags_lst$LL$table$entrezgene))]]
TNFgenes_RT_entrez <- ENTREZ_genes[ENTREZ_genes %in% toptags_lst$RT$table$entrezgene[!(is.na(toptags_lst$RT$table$entrezgene))]]
TNF_entrez <- intersect(TNFgenes_original_entrez,TNFgenes_RT_entrez)
TNF_genes <- LEGO_DGE_lst$ORGAN$genes[match(TNF_entrez, 
                                     LEGO_DGE_lst$ORGAN$genes$entrezgene),]$hgnc_symbol

gg_ORGAN_HM = GenePyramid_2Datsets_v2(toptags_lst$LL[toptags_lst$LL$table$FDR < 0.05 ,]$table,
                                      toptags_lst$RT[toptags_lst$RT$table$FDR < 0.05 ,]$table, 
                                      "Original LeGO", "Retransplanted", 
                                      intersect(TNFgenes_original, TNFgenes_RT), 
                                      UP_str="Lung", DOWN_str="Liver", 
                                      UP_col="#D09C0A", DOWN_col=organ.pal[["Liver"]],
                                      return=TRUE)

gg_ORGAN_KEGG = GenePyramid_2Datsets_v2(toptags_lst$LL[toptags_lst$LL$table$FDR < 0.05 ,]$table,
                                        toptags_lst$RT[toptags_lst$RT$table$FDR < 0.05 ,]$table, 
                                        "Original LeGO", "Retransplanted", 
                                        TNF_genes, 
                                        UP_str="Lung", DOWN_str="Liver", 
                                        UP_col="#D09C0A", DOWN_col=organ.pal[["Liver"]],
                                        return=TRUE)

svg(paste0(OUTPUT_DIR,prefix, "TNFplots_RT.svg", ""), width=10, height=5)
cowplot::plot_grid(NULL,NULL,gg_ORGAN_KEGG,gg_ORGAN_HM, 
          labels = c("A) KEGG TNF signaling pathway", 
                     "B) Hallmarks TNF\u03b1 signaling pathway via NF-\u03BA \u0392"), 
          rel_heights=c(0.65,12),label_fontface ="plain",hjust =c(-0.07,-0.04),label_size=13,
          ncol=2, nrow=2)
dev.off()






#### ---- SUPP TABLE: RT ENRICHMENT

OrganDE_RT <- PerformDE_QLF(LEGO_DGE_LL, LEGO_DGE_LL$design, contrast=c(-1,1,0,0,0))

### --- KEGG PATHWAYS
kegg <- kegga(glm_obj_lst$RT, species="Hs", geneid = "entrezgene")
topKegg <- as.data.frame(topKEGG(kegg, number=30))

write.table(topKegg,
            file= paste0(OUTPUT_DIR,prefix,"KEGGenrich_OrganUP_RT.txt"),
            sep="\t")


### ----- CAMERA
HM_Sigs <- GetMSigDB()
idx_cam <- ids2indices(HM_Sigs,id=LEGO_DGE_lst$RT$genes$hgnc_symbol)

cam <- camera(LEGO_DGE_lst$RT, index=idx_cam, design=LEGO_DGE_lst$RT$design, contrast=c(-1, 1, 0, 0)) 
options(digits=2)
cam <- cam[cam$PValue < 0.05,]
cam <- cam[cam$FDR < 0.05,]
cam$GeneSet <- rownames(cam)
head(cam,20)

write.table(cam,
            file= paste0(OUTPUT_DIR,prefix,"HM_RT.txt"),
            sep="\t")


#### ---- SUPP TABLE: LL ENRICHMENT FOR PCA-FILTERED GENE SET 
## (taken from other script so won't run)
## Sorry future Holly

LEGO_Sigs_old <- LoadLEGOSigs()

myUniverse=union(LEGO_DGE_LL$genes$entrezgene[!(is.na(LEGO_DGE_LL$genes$entrezgene))], LEGO_DGE_ALL$genes$entrezgene[!(is.na(LEGO_DGE_ALL$genes$entrezgene))])
gene_annot = LEGO_DGE_ALL$genes[LEGO_DGE_ALL$genes$hgnc_symbol %in% c(LEGO_Sigs_old$OrganUP_PCA, LEGO_Sigs_old$OrganDN_PCA),]
gene_annot= gene_annot[!(is.na(gene_annot$entrezgene)),]

UP_genes =LEGO_Sigs_old$OrganUP_PCA[LEGO_Sigs_old$OrganUP_PCA %in% gene_annot$hgnc_symbol]
UP_genes = gene_annot[gene_annot$hgnc_symbol %in% UP_genes,]$entrezgene
GOENRICH_Lung <- clusterProfiler::enrichGO(
  gene = as.character(UP_genes),      # a vector of entrez gene id.
  keyType = "ENTREZID",
  universe = as.character(myUniverse),
  OrgDb="org.Hs.eg.db",      # organism to analyze
  ont = as.character('BP'),    # ontology term
  pAdjustMethod = "BH",        # method for multiple testing correction - benjamini & hochberg
  pvalueCutoff = 0.05,         # P-value cutoff for the proteomic course
  minGSSize = 10,              # minimal size of genes annotated by Ontology term for testing.
  maxGSSize = 500
)

write.table(GOENRICH_Lung@result[GOENRICH_Lung@result$p.adjust<0.05,][order(GOENRICH_Lung@result$p.adjust),][1:20,],
            file= "/stornext/Home/data/allstaff/w/whitfield.h/PhD_Aggressiveness/output/DE/GOenrich_OrganUP_PCA.txt", sep="\t")

KEGGENRICH_Lung <- clusterProfiler::enrichKEGG(
  gene = as.character(UP_genes),      # a vector of entrez gene id.
  # keyType = "ENTREZID",
  universe = as.character(myUniverse),
  organism="hsa",      # organism to analyze
  pAdjustMethod = "BH",        # method for multiple testing correction - benjamini & hochberg
  pvalueCutoff = 0.05,         # P-value cutoff for the proteomic course
  minGSSize = 10, maxGSSize = 500
)

write.table(KEGGENRICH_Lung@result[KEGGENRICH_Lung@result$p.adjust<0.05,][order(KEGGENRICH_Lung@result$p.adjust),][1:20,],
            file= "/stornext/Home/data/allstaff/w/whitfield.h/PhD_Aggressiveness/output/DE/KEGGenrich_OrganUP_PCA.txt", sep="\t")












##### -- 2.4 EXPERIMENTAL DESIGN AND DATA PROCESSING  --------------------------
prefix="CH2.4/CH2.4_"


plotDGE_heatmap(LEGO_DGE_lst$CLONE, 
                c(LEGO_sigs$CloneUP, LEGO_sigs$CloneDN), 
                clone.pal, 
                paste0(OUTPUT_DIR,prefix, "Supp_DEheatmap_ALL.svg", ""))



#### ----  EYE BALL DEGs HEATMAP

tr <- glmTreat(glmQLFit(LEGO_DGE_lst$CLONE, LEGO_DGE_lst$CLONE$design), contrast=c(1, -1, 0, 0, 0,0),  lfc=log2(1.5))
DE_obj <- topTags(tr, n=100, p.value=0.05, adjust.method = "BH", sort.by = "PValue")
heatmap_UP = DE_obj$table[DE_obj$table$logFC>0,]$hgnc_symbol
heatmap_DN = DE_obj$table[DE_obj$table$logFC<0,]$hgnc_symbol
heatmap_genes = c(heatmap_UP,heatmap_DN)
heatmap_genes = heatmap_genes[!(heatmap_genes == "")]

### --- GET GO TERMS
#organ_enrich <- getEnrichedTerms(glm_obj_lst$ORGAN, top_n=200)
clone_enrich <- getEnrichedTerms(glm_obj_lst$CLONE, top_n=200)

go_mart <- getGOmart(heatmap_genes, clone_enrich, 
                     ensembl_obj, term_lst_lst =TRUE)

gene2GO <- getGeneMembership_GO(heatmap_genes, 
                                clone_enrich[grepl("GO",names(clone_enrich))], 
                                go_mart,term_lst_lst =TRUE)

### --- GET KEGG PATHWAYS
entrez_genes <- glm_obj_lst$CLONE$genes[glm_obj_lst$CLONE$genes$hgnc_symbol %in% heatmap_genes,]$entrezgene
names(entrez_genes) <- glm_obj_lst$CLONE$genes[glm_obj_lst$CLONE$genes$hgnc_symbol %in% heatmap_genes,]$hgnc_symbol
entrez_genes <- entrez_genes[!(is.na(entrez_genes))]
kegga <- getKEGGmart(unique(names(c(clone_enrich$KEGG_up, clone_enrich$KEGG_dn))))

gene2KEGG <- getGeneMembership_KEGG(entrez_genes, 
                                    clone_enrich[grepl("KEGG",names(clone_enrich))], 
                                    kegga)


heatmap_annot_dat <- data.frame()
for (x_gene in names(gene2GO)){
  
  gene_row <- c()
  x_lst <- gene2GO[[x_gene]]
  x_lst <- as.vector(unlist(x_lst[grepl("_up",names(x_lst))]))
  y_lst <- gene2KEGG[[x_gene]]
  y_lst <- as.vector(unlist(y_lst[grepl("_up",names(y_lst))]))
  
  for (x_go in unique(as.vector(unlist(gene2GO)))){
    if (x_go %in% x_lst){
      gene_row <- c(gene_row, "Y")
    } else {
      gene_row <- c(gene_row, "N")
    }
  }
  
  for (x_kegg in unique(as.vector(unlist(gene2KEGG)))){
    if (x_kegg %in% y_lst){
      gene_row <- c(gene_row, "Y")
    } else {
      gene_row <- c(gene_row, "N")
    }
  }
  
  heatmap_annot_dat <- rbind(heatmap_annot_dat,gene_row)
}

for (x_gene in setdiff(heatmap_genes,names(gene2GO))){
  heatmap_annot_dat <- rbind(heatmap_annot_dat,rep("N",dim(heatmap_annot_dat)[2]))
}

colnames(heatmap_annot_dat) <- c(unique(as.vector(unlist(gene2GO))), unique(as.vector(unlist(gene2KEGG))))
rownames(heatmap_annot_dat) <- c(names(gene2GO), setdiff(heatmap_genes,names(gene2GO)))


### --- Selecting go/kegg to plot -- skip
KEGG_to_plot <- names(sort(table(as.vector(unlist(gene2KEGG))), decreasing = T)[1:50])
sort(table(as.vector(unlist(gene2GO))), decreasing = T)
GO_to_plot <- names(sort(table(as.vector(unlist(gene2GO))), decreasing = T)[1:33])

GOEnrich <- goana(glm_obj_lst$CLONE, species="Hs", 
                  geneid=glm_obj_lst$CLONE$genes$entrezgene, FDR=0.05)
KEGGEnrich <- kegga(glm_obj_lst$CLONE, species="Hs", 
                    geneid=glm_obj_lst$CLONE$genes$entrezgene, FDR=0.05)
GOEnrich[rownames(GOEnrich) %in% GO_to_plot,]
KEGGEnrich[rownames(KEGGEnrich) %in% KEGG_to_plot,]



#0032588 , MHC - 0023026 
GO_to_plot <- c("GO:0042995", "GO:0002376", "GO:0012507", "GO:0062023", "GO:0031012")
KEGG_to_plot <- c("path:hsa04810")


## get expression data
dat_x <- LEGO_DGE_lst$CLONE$batch_corrected[!(LEGO_DGE_lst$CLONE$genes$hgnc_symbol=="") & 
                                              !(duplicated(LEGO_DGE_lst$CLONE$genes$hgnc_symbol)),]
rownames(dat_x) <- LEGO_DGE_lst$CLONE$genes[!(LEGO_DGE_lst$CLONE$genes$hgnc_symbol=="") & 
                                              !(duplicated(LEGO_DGE_lst$CLONE$genes$hgnc_symbol)),]$hgnc_symbol
genes_to_plot <- intersect(heatmap_genes, rownames(dat_x))
dat_x <- dat_x[genes_to_plot,]
dat_x <- t(scale(t(dat_x)))
colnames(dat_x) <- LEGO_DGE_lst$CLONE$samples$sample

## annot dat
annot_dat <- as.data.frame(heatmap_annot_dat[, colnames(heatmap_annot_dat) %in% c(GO_to_plot,KEGG_to_plot)])
GO_dict <- setNames(GOEnrich$Term, rownames(GOEnrich))[GO_to_plot]
KEGG_dict <- setNames(KEGGEnrich$Pathway, rownames(KEGGEnrich))[KEGG_to_plot]
term_dict <- c(GO_dict, KEGG_dict)
term_dict[["GO:0000122"]] = "neg. reg. of transcription by RNA poly. II"
colnames(annot_dat) <- str_to_title(as.vector(term_dict[colnames(annot_dat)])) 

## annot colours
term.pal = c("#51806a", "white")  #325756
names(term.pal)=c("Y", "N")
term.pal_lst <- lapply(1:length(colnames(annot_dat)), function(x){term.pal})
names(term.pal_lst) <- colnames(annot_dat)


## LL SINGSCORES
xx=reshape2::dcast(ALL_singscores[(ALL_singscores$Sig %in% c("CLONE_13", "CLONE_2")) & (ALL_singscores$Dataset=="LEGO_clone"),], Sig ~ Sample, value.var = "Score")
rownames(xx) <- xx$Sig
xx <- xx[,!(colnames(xx) == "Sig")]
xx <- as.data.frame(t(xx))
colnames(xx) <- c('c13', "c2")
xx <- xx[!(grepl("Ms4",rownames(xx))),]
xx <- xx[colnames(LEGO_DGE_lst$CLONE$batch_corrected),]
#LUNG_pal=c(blend_colours("white","#FAE093",10), blend_colours("#FAE093","#A07808",90))
#LIVER_pal=c(blend_colours("white","#7C7189",50), blend_colours("#7C7189","#3E3945",50))

max_c = round(max(xx), digits=1)
c13_pal = colorRamp2(c(min(xx$c13)-0.01, quantile(xx$c13, 0.5)[[1]], max_c), c("white","#FAE093", "#7C5D06"))
c2_pal = colorRamp2(c(min(xx$c2)-0.02, quantile(xx$c2, 0.5)[[1]], max_c), c("white","#7C7189", "#2A262E"))

ht_obj <- Heatmap(dat_x,row_names_side = "right", col=magma(100),column_dend_height = unit(15, "mm"),
                  show_row_dend=FALSE,show_column_names =FALSE,row_names_gp = gpar(fontsize = 8),
                  top_annotation=HeatmapAnnotation(Clone = as.vector(LEGO_DGE_lst$CLONE$samples$clone),
                                                   col = list(Clone = clone.pal),
                                                   #  annotation_name_side ="right"
                                                   show_annotation_name =FALSE),
                  right_annotation=rowAnnotation(df=annot_dat[rownames(dat_x),],
                                                 col=term.pal_lst,show_legend=FALSE, 
                                                 annotation_name_rot=-40,annotation_name_side ="bottom",
                                                 annotation_name_gp =gpar(fontsize = 9.5), gap=unit(2, "mm")),
                  heatmap_legend_param =list(title="Log-Expression"),
                  column_dend_reorder=ifelse(LEGO_DGE_lst$CLONE$samples$clone=="c13", 2, 1),
                  bottom_annotation = HeatmapAnnotation(c13=xx$c13,
                                                        c2=xx$c2,
                                                        col = list(c2 = c2_pal, c13=c13_pal),
                                                        annotation_name_side ="left",
                                                        show_annotation_name =FALSE, show_legend = TRUE,
                                                        annotation_legend_param= list(c13 = list(title = "c13 Score"), c2=list(title = "c2 Score"))))
#draw(ht_obj, heatmap_legend_side="left") # annotation_legend_side

svg(paste0(OUTPUT_DIR,prefix, "DEheatmap_glmTreat_annot.svg", ""), width=10,height=14)
draw(ht_obj,merge_legends=T,heatmap_legend_side ="left",
     ht_gap  = unit(4, "mm"), auto_adjust = TRUE, padding=unit(c(1, 1, 1, 2), "cm"))
dev.off()





###### ----------  CHARACTERISE // SURVIVAL //  SINGLE CELL??

# CD44+/CD24low/- have a high tumorigenic potential.

#MEGA_SCE <-  ScoreSC(MEGA_SCE, DATA_DIR, sig_lst, PCA_name="featureSetPCA")
#save(MEGA_SCE, file=paste(DATA_DIR, "LEGO_MEGA_SCE.Rdata", sep="")) 
#LEGO_lst <- lapply(LEGO_lst, function(x){ScoreSC(x, DATA_DIR, 
#                                                 LEGO_sigs[grepl("Clone",names(LEGO_sigs))], 
#                                                 PCA_name="CLONEfeatureSetPCA")})

SubcloneDict <- setNames(c("13", "2",
                           "9", "29",  "3"), 
                         c("D9", "D10", "D11",
                           "E4","E5"))

SequencingDict <- setNames(c("Pool1", "Pool1",
                             "Pool2", "Pool3",  "Pool2"), 
                           c("D9", "D10", "D11",
                             "E4","E5"))

## Single cell
load(file=paste(DATA_DIR, "LEGO_lst_Processed.Rdata", sep=""))

load(file=paste0(DATA_DIR, "LEGO_MEGA_SCE.Rdata")) # MEGA_SCE <<-- All Lung

plot_df <- as.data.frame(colData(MEGA_SCE)[,colnames(colData(MEGA_SCE)) %in% c("CellID", "CloneUP", "CloneDN", "CloneUP_PCA", "CloneDN_PCA")])
plot_df <- reshape2::melt(plot_df)
plot_df$LeGOid <- as.vector(setNames(MEGA_SCE$LeGOid,MEGA_SCE$CellID)[plot_df$CellID])
plot_df$Subclone <- as.vector(setNames(MEGA_SCE$Subclone,MEGA_SCE$CellID)[plot_df$CellID])
plot_df$Pool <- as.vector(SequencingDict[plot_df$LeGOid])
plot_df <- plot_df[plot_df$variable %in% c("CloneUP", "CloneDN"),]
ggplot(data=plot_df, aes(x=Subclone, y=value, fill=Pool))+geom_boxplot()+facet_wrap(~variable)


## Separate SCE objects
plot_df <- do.call(rbind,lapply(LEGO_lst, function(x){as.data.frame(colData(x)[,colnames(colData(x)) %in% c("CellID", "CloneUP", "CloneDN", "CloneUP_PCA", "CloneDN_PCA")])}))
plot_df$LeGOid <- unlist(lapply(strsplit(rownames(plot_df),"[.]"), function(x){x[[1]]}))
plot_df <- reshape2::melt(plot_df, id.vars=c("CellID", "LeGOid"))
plot_df$Subclone <- as.vector(SubcloneDict[plot_df$LeGOid])
plot_df$Pool <- as.vector(SequencingDict[plot_df$LeGOid])
plot_df <- plot_df[plot_df$variable %in% c("CloneUP", "CloneDN"),]
ggPool <- ggplot(data=plot_df, aes(x=Subclone, y=value, fill=Pool))+geom_boxplot()+
  facet_wrap(~variable)+labs(y="Score")+theme(axis.title.x=element_blank(), plot.margin = margin(0,0,15,0))
ggClone <- ggplot(data=plot_df, aes(x=Subclone, y=value, fill=Subclone))+geom_boxplot()+
  facet_wrap(~variable)+scale_fill_manual(values=clone.pal)+labs(y="Score")

svg(paste0(OUTPUT_DIR,prefix, "boxplotsSC_clone.svg", ""), width=8, height=8)
cowplot::plot_grid(ggPool,ggClone,labels = c("A)","B)"),nrow=2)
dev.off()

